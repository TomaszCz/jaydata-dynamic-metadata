/*//////////////////////////////////////////////////////////////////////////////////////
//////     Autogenerated by JaySvcUtil http://JayData.org for more info        /////////
//////                      OData  V4  TypeScript                              /////////
//////////////////////////////////////////////////////////////////////////////////////*/

declare module JayData.Test.CommonItems.Entities {

    export class TestItemType extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; blob?: Edm.Binary; b0?: Edm.Boolean; b1?: Edm.Byte; d0?: Edm.DateTimeOffset; de0?: Edm.Decimal; n0?: Edm.Double; si0?: Edm.Single; g0?: Edm.Guid; i16?: Edm.Int16; i0?: Edm.Int32; i64?: Edm.Int64; s0?: Edm.String });

        Id: Edm.Int32;
        blob: Edm.Binary;
        b0: Edm.Boolean;
        b1: Edm.Byte;
        d0: Edm.DateTimeOffset;
        de0: Edm.Decimal;
        n0: Edm.Double;
        si0: Edm.Single;
        g0: Edm.Guid;
        i16: Edm.Int16;
        i0: Edm.Int32;
        i64: Edm.Int64;
        s0: Edm.String;
    }

    export class TestItemGroup extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Guid; Name?: Edm.String; Items?: JayData.Test.CommonItems.Entities.TestItemGuid[] });

        Id: Edm.Guid;
        Name: Edm.String;
        Items: JayData.Test.CommonItems.Entities.TestItemGuid[];
    }

    export class TestItemGuid extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Guid; i0?: Edm.Int32; b0?: Edm.Boolean; s0?: Edm.String; time?: Edm.TimeOfDay; date?: Edm.Date; t?: Edm.DateTimeOffset; dur?: Edm.Duration; dtOffset?: Edm.DateTimeOffset; lng?: Edm.Int64; dec?: Edm.Decimal; flt?: Edm.Single; emails?: Edm.String[]; Group?: JayData.Test.CommonItems.Entities.TestItemGroup; GetDisplayText?: $data.ServiceAction });

        Id: Edm.Guid;
        i0: Edm.Int32;
        b0: Edm.Boolean;
        s0: Edm.String;
        time: Edm.TimeOfDay;
        date: Edm.Date;
        t: Edm.DateTimeOffset;
        dur: Edm.Duration;
        dtOffset: Edm.DateTimeOffset;
        lng: Edm.Int64;
        dec: Edm.Decimal;
        flt: Edm.Single;
        emails: Edm.String[];
        Group: JayData.Test.CommonItems.Entities.TestItemGroup;
        GetDisplayText: { (): Promise<Edm.String>; };
    }

    export class TagConnection extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; Article?: JayData.Test.CommonItems.Entities.Article; Tag?: JayData.Test.CommonItems.Entities.Tag });

        Id: Edm.Int32;
        Article: JayData.Test.CommonItems.Entities.Article;
        Tag: JayData.Test.CommonItems.Entities.Tag;
    }

    export class TestItem extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; i0?: Edm.Int32; b0?: Edm.Boolean; s0?: Edm.String; blob?: Edm.Byte[]; n0?: Edm.Double; d0?: Edm.DateTimeOffset; g0?: Edm.Guid; l0?: Edm.Int64; de0?: Edm.Decimal; b1?: Edm.Byte });

        Id: Edm.Int32;
        i0: Edm.Int32;
        b0: Edm.Boolean;
        s0: Edm.String;
        blob: Edm.Byte[];
        n0: Edm.Double;
        d0: Edm.DateTimeOffset;
        g0: Edm.Guid;
        l0: Edm.Int64;
        de0: Edm.Decimal;
        b1: Edm.Byte;
    }

    export class Tag extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; Title?: Edm.String; Articles?: JayData.Test.CommonItems.Entities.TagConnection[] });

        Id: Edm.Int32;
        Title: Edm.String;
        Articles: JayData.Test.CommonItems.Entities.TagConnection[];
    }

    export class Category extends JayData.Test.CommonItems.Entities.MyTClass {
        constructor();
        constructor(initData: { RowVersion?: Edm.Binary; Subtitle?: Edm.String; Description?: Edm.String; Articles?: JayData.Test.CommonItems.Entities.Article[] });

        RowVersion: Edm.Binary;
        Subtitle: Edm.String;
        Description: Edm.String;
        Articles: JayData.Test.CommonItems.Entities.Article[];
    }

    export class UserProfile extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; FullName?: Edm.String; Bio?: Edm.String; Avatar?: Edm.Binary; Birthday?: Edm.DateTimeOffset; Location?: JayData.Test.CommonItems.Entities.Location; User?: JayData.Test.CommonItems.Entities.User });

        Id: Edm.Int32;
        FullName: Edm.String;
        Bio: Edm.String;
        Avatar: Edm.Binary;
        Birthday: Edm.DateTimeOffset;
        Location: JayData.Test.CommonItems.Entities.Location;
        User: JayData.Test.CommonItems.Entities.User;
    }

    export class Article extends JayData.Test.CommonItems.Entities.MyTClass {
        constructor();
        constructor(initData: { RowVersion?: Edm.Binary; Lead?: Edm.String; Body?: Edm.String; CreateDate?: Edm.DateTimeOffset; Thumbnail_LowRes?: Edm.Binary; Thumbnail_HighRes?: Edm.Binary; Category?: JayData.Test.CommonItems.Entities.Category; Reviewer?: JayData.Test.CommonItems.Entities.User; Author?: JayData.Test.CommonItems.Entities.User; Tags?: JayData.Test.CommonItems.Entities.TagConnection[] });

        RowVersion: Edm.Binary;
        Lead: Edm.String;
        Body: Edm.String;
        CreateDate: Edm.DateTimeOffset;
        Thumbnail_LowRes: Edm.Binary;
        Thumbnail_HighRes: Edm.Binary;
        Category: JayData.Test.CommonItems.Entities.Category;
        Reviewer: JayData.Test.CommonItems.Entities.User;
        Author: JayData.Test.CommonItems.Entities.User;
        Tags: JayData.Test.CommonItems.Entities.TagConnection[];
    }

    export class MyTClass extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; Title?: Edm.String });

        Id: Edm.Int32;
        Title: Edm.String;
    }

    export class User extends $data.Entity {
        constructor();
        constructor(initData: { Id?: Edm.Int32; LoginName?: Edm.String; Email?: Edm.String; UserType?: JayData.Test.CommonItems.Entities.UserType; RevieweredArticles?: JayData.Test.CommonItems.Entities.Article[]; AuthoredArticles?: JayData.Test.CommonItems.Entities.Article[]; Profile?: JayData.Test.CommonItems.Entities.UserProfile });

        Id: Edm.Int32;
        LoginName: Edm.String;
        Email: Edm.String;
        UserType: JayData.Test.CommonItems.Entities.UserType;
        RevieweredArticles: JayData.Test.CommonItems.Entities.Article[];
        AuthoredArticles: JayData.Test.CommonItems.Entities.Article[];
        Profile: JayData.Test.CommonItems.Entities.UserProfile;
    }

    export class Location extends $data.Entity {
        constructor();
        constructor(initData: { Address?: Edm.String; City?: Edm.String; Zip?: Edm.Int32; Country?: Edm.String });

        Address: Edm.String;
        City: Edm.String;
        Zip: Edm.Int32;
        Country: Edm.String;
    }

    export enum UserType {
        Admin,
        Customer,
        Guest,
    }

}

declare module Default {

    export class Container extends $data.EntityContext {
        onReady(): Promise<Container>;

        Users: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.User, JayData.Test.CommonItems.Entities.User>;
        Articles: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.Article, JayData.Test.CommonItems.Entities.Article>;
        UserProfiles: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.UserProfile, JayData.Test.CommonItems.Entities.UserProfile>;
        Categories: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.Category, JayData.Test.CommonItems.Entities.Category>;
        Tags: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.Tag, JayData.Test.CommonItems.Entities.Tag>;
        TestTable: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.TestItem, JayData.Test.CommonItems.Entities.TestItem>;
        TagConnections: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.TagConnection, JayData.Test.CommonItems.Entities.TagConnection>;
        TestTable2: TestTable2;
        TestItemGroups: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.TestItemGroup, JayData.Test.CommonItems.Entities.TestItemGroup>;
        TestItemTypes: $data.EntitySet<typeof JayData.Test.CommonItems.Entities.TestItemType, JayData.Test.CommonItems.Entities.TestItemType>;
        SAction1: { (number: Edm.Int32): Promise<Edm.String>; };
        SAction2: { (count: Edm.Int32): $data.Queryable<JayData.Test.CommonItems.Entities.Article>; };
        SFunction1: { (number: Edm.Int32): $data.Queryable<Edm.String>; };
        SFunction2: { (number: Edm.Int32): Promise<Edm.String>; };
    }
    export class TestTable2 extends $data.EntitySet<typeof JayData.Test.CommonItems.Entities.TestItemGuid, JayData.Test.CommonItems.Entities.TestItemGuid> {
        GetTitles: { (count: Edm.Int32): $data.Queryable<Edm.String>; };
    }


}

export {JayData as JayData}

export {Default as Default}

export var type: typeof Default.Container;
export var factory: (config:any) => Default.Container;